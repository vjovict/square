{"version":3,"file":"component---src-pages-index-tsx-d3654c28d0df3e8f1c60.js","mappings":"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","sources":["webpack://square_friends/./src/components/seo.tsx","webpack://square_friends/./src/hooks/use-site-metadata.ts","webpack://square_friends/./src/hooks/use-site-friends.ts","webpack://square_friends/./src/components/page-title/index.tsx","webpack://square_friends/./src/components/card/index.tsx","webpack://square_friends/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\"\nimport { Helmet } from \"react-helmet\"\n\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\n\ntype Props = {\n  title: string\n  description?: string\n}\n\nconst SEO: React.FC<Props> = ({ title, description }) => {\n  const { title: siteTitle, description: siteDesc } = useSiteMetadata()\n  const metaDescription = description || siteDesc\n\n  return (\n    <Helmet\n      title={title}\n      titleTemplate={`${siteTitle} - %s`}\n      meta={[\n        {\n          name: \"description\",\n          content: metaDescription,\n        },\n        {\n          property: \"og:type\",\n          content: \"website\",\n        },\n        {\n          property: \"og:name\",\n          content: title,\n        },\n        {\n          property: \"og:description\",\n          content: metaDescription,\n        },\n        {\n          name: \"twitter:name\",\n          content: title,\n        },\n        {\n          name: \"twitter:description\",\n          content: metaDescription,\n        },\n      ]}\n    />\n  )\n}\n\nexport { SEO as default }\n","import { graphql, useStaticQuery } from \"gatsby\"\n\ntype SiteMetadata = {\n  site: {\n    siteMetadata: {\n      description: string\n      title: string\n    }\n  }\n}\n\nfunction useSiteMetadata() {\n  const { site } = useStaticQuery<SiteMetadata>(\n    graphql`\n      query SiteMetadata {\n        site {\n          siteMetadata {\n            description\n            title\n          }\n        }\n      }\n    `\n  )\n\n  return site.siteMetadata\n}\n\nexport { useSiteMetadata }\n","import React from \"react\"\nimport ReactGA from \"react-ga\"\n\nimport Data from \"../data/friendsList.json\"\nimport storage from \"../util/storage\"\n\nconst STORAGE_KEY = \"__square_friends\"\n\nexport interface IFriendPayload {\n  id: number\n  name: string\n  social: string\n  bio: string\n  date: string\n  following: boolean\n}\n\nfunction useSiteFriends () {\n  const [friends, setFriends] = React.useState<IFriendPayload[]>(() => {\n    const cachedData = storage.get(STORAGE_KEY)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const data = Data.map(user => ({ ...user, following: false }))\n    storage.set(STORAGE_KEY, data)\n    return data\n  })\n\n  const toggleFavorite = React.useCallback(\n    (id: number) => (ev: React.MouseEvent<HTMLDivElement>) => {\n      ev.stopPropagation()\n      let connect = false\n\n      setFriends(data =>\n        data.map(f => {\n          if (f.id === id && !f.following) {\n            connect = true\n          }\n          return f.id === id ? { ...f, following: !f.following } : f\n        })\n      )\n\n      ReactGA.event({\n        action: \"Follow\",\n        category: \"Social\",\n        label: connect ? \"Yes\" : \"No\"\n      })\n    },\n    []\n  )\n\n  const getFriend = (friendId: string) => {\n    return friends.filter(({ id }) => id === +friendId)[0]\n  }\n\n  React.useEffect(() => {\n    storage.set(STORAGE_KEY, friends)\n  }, [friends])\n\n  return { friends, toggleFavorite, getFriend }\n}\n\nexport { useSiteFriends }\n","import React from \"react\"\n\ntype Props = {\n  title: string\n  extra?: JSX.Element\n}\nconst PageTitle: React.FC<Props> = ({ title, extra }) => {\n  return (\n    <div className=\"page-title\">\n      <div className=\"title\">\n        <h2>{title}</h2>\n      </div>\n      {extra ? <div className=\"extra\">{extra}</div> : null}\n    </div>\n  )\n}\n\nexport { PageTitle as default }\n","import React from \"react\"\n\nimport { useSiteFiles } from \"../../hooks/use-site-files\"\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  bannerName: string\n  title: string\n  subtitle: string\n  description: string\n  avatar: JSX.Element\n  action: JSX.Element\n}\nconst Card: React.FC<Props> = ({\n  bannerName,\n  title,\n  subtitle,\n  description,\n  avatar,\n  action,\n  ...rest\n}) => {\n  const files = useSiteFiles()\n\n  const cover = files.filter(\n    file => file.name === bannerName && file.relativeDirectory === \"covers\"\n  )[0]\n\n  return (\n    <div className=\"card\" {...rest}>\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: \"59.35%\",\n          borderRadius: \"15px 15px 0px 0px\",\n          background: `url(${cover?.publicURL}) #ccc`,\n          backgroundSize: \"cover\",\n        }}\n      />\n      <div className=\"avatar\">{avatar}</div>\n      <div className=\"profile\">\n        <h2>{title}</h2>\n        <h5>{subtitle}</h5>\n        <p>{description}</p>\n      </div>\n      <div className=\"action\">{action}</div>\n    </div>\n  )\n}\n\nexport { Card as default }\n","import React from \"react\"\nimport { navigate, PageProps } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\nimport Image from \"../components/image\"\nimport PageTitle from \"../components/page-title\"\nimport UserCard from \"../components/card\"\nimport { useSiteFriends } from \"../hooks/use-site-friends\"\nimport { useSiteLanguage } from \"../hooks/use-site-language\"\n\nconst Index: React.FC<PageProps> = () => {\n  const { dictionary } = useSiteLanguage()\n  const { friends, toggleFavorite } = useSiteFriends()\n  const [openDropdown, setOpenDropdown] = React.useState<boolean>(false)\n  const [order, setOrder] = React.useState<\"Newest\" | \"Oldest\">(\"Newest\")\n\n  const sortFriendsList = React.useCallback(\n    (order: \"Newest\" | \"Oldest\") => () => {\n      setOrder(order)\n    },\n    []\n  )\n\n  const friendsList = React.useMemo(() => {\n    const sorted = friends.sort((a, b) => {\n      if (a.date > b.date) {\n        return order === \"Newest\" ? -1 : 1\n      }\n\n      if (a.date < b.date) {\n        return order === \"Newest\" ? 1 : -1\n      }\n\n      return 0\n    })\n\n    return sorted\n  }, [friends, order])\n\n  return (\n    <>\n      <SEO title={dictionary.indexSeo} />\n      <PageTitle\n        title={dictionary.homeTitle}\n        extra={\n          <div className=\"landing-extra\">\n            <Image name=\"search\" directory=\"icons\" />\n            <div\n              className=\"sort-items\"\n              onClick={() => setOpenDropdown(o => !o)}\n            >\n              <div className=\"view\">\n                {dictionary.sortBy}:{\" \"}\n                <b>\n                  {order === \"Newest\"\n                    ? dictionary.newestSort\n                    : dictionary.oldestSort}\n                </b>\n              </div>\n              <div className=\"vertical-line\" />\n              <Image className=\"icd\" name=\"dropdown\" directory=\"icons\" />\n              <div className={`dropdown ${openDropdown ? \" open\" : \"\"}`}>\n                <ul>\n                  <li onClick={sortFriendsList(\"Newest\")}>\n                    {dictionary.newestSort}\n                  </li>\n                  <li onClick={sortFriendsList(\"Oldest\")}>\n                    {dictionary.oldestSort}\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <Image name=\"filter\" directory=\"icons\" />\n          </div>\n        }\n      />\n\n      <div className=\"card-container\">\n        {friendsList.map(friend => (\n          <UserCard\n            key={friend.id}\n            title={friend.name}\n            subtitle={friend.social}\n            description={friend.bio}\n            avatar={<Image name={`${friend.id}`} directory={\"avatars\"} />}\n            bannerName={`${friend.id}`}\n            action={\n              <div\n                className=\"card-action\"\n                onClick={toggleFavorite(friend.id)}\n                role=\"button\"\n              >\n                {friend.following ? (\n                  <Image name=\"dot\" directory=\"icons\" className=\"dot\" />\n                ) : null}\n                {friend.following ? dictionary.following : dictionary.follow}\n              </div>\n            }\n            onClick={() => navigate(`/friend-details/${friend.id}`)}\n          />\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport { Index as default }\n"],"names":["SEO","title","description","useStaticQuery","site","siteMetadata","siteTitle","siteDesc","metaDescription","Helmet","titleTemplate","meta","name","content","property","STORAGE_KEY","useSiteFriends","React","cachedData","storage","data","Data","user","following","friends","setFriends","toggleFavorite","id","ev","stopPropagation","connect","map","f","ReactGA","action","category","label","getFriend","friendId","filter","PageTitle","extra","className","Card","bannerName","subtitle","avatar","rest","cover","useSiteFiles","file","relativeDirectory","style","position","left","right","top","bottom","borderRadius","background","publicURL","backgroundSize","Index","dictionary","useSiteLanguage","openDropdown","setOpenDropdown","order","setOrder","sortFriendsList","friendsList","sort","a","b","date","indexSeo","homeTitle","directory","onClick","o","sortBy","newestSort","oldestSort","friend","key","social","bio","role","follow","navigate"],"sourceRoot":""}